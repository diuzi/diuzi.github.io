<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>daily_leetcode_2020_1110_31_下一个排列</title>
      <link href="/2020/11/10/daily-leetcode-2020-1110-31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
      <url>/2020/11/10/daily-leetcode-2020-1110-31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述">1 题目描述</h1><p>下面是官方原题描述：</p><blockquote><p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p><p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p><p>必须原地修改，只允许使用额外常数空间。</p><p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<br>1,2,3 → 1,3,2<br>3,2,1 → 1,2,3<br>1,1,5 → 1,5,1</p></blockquote><p>如果你没有听懂，那不该是你一个^-^,</p><p><code>翻译</code> 过来就是这样的</p><blockquote><p>找出这个数组排序出的所有数中，刚好比当前数大的那个数，不存在就返回最小的排列</p></blockquote><p>刚拿到题的时候没有思路，后来写了几十行代码才发现思路已经不符合题意了-<code>常数空间</code>,参考了别人的答案；但是发现先很多题解要么太啰嗦要么太书面化，要么给了答案没说 原因，看代码一知半解很是模糊。代码很容易看懂，单解释起来还是有些啰嗦</p><p>下面将非常详细地以大白话的形式从答案推题解——<code>对于每一步的操作说出个所以然</code>,而不是一个抽象的洋洋洒洒很多字讲不明白的，然后再正向推题解。</p><h1 id="从答案推原因">2 从答案推原因</h1><p>先给出这题的答案(唯一):</p><p>存在的情况下：</p><blockquote><ol><li>从后往前遍历，寻找一个 满足 nums[i]&lt; nums[i+1] 一个下标 i，</li><li>从下标 i+1 到 end这段寻找一个数 nums[k]&gt; nums[i](这里也是从后往前遍历)</li><li>交换 nums[k] 与nums[i]</li><li>最后翻转 nums[k+1:]</li></ol></blockquote><p>不存在：</p><blockquote><p>将序列升序排序即可</p></blockquote><p>重点再第一种情况,存在的情况下：</p><ol><li><p>那么问题来了，为什么要从后往前遍历</p><blockquote><p>我们寻找的是比原数大的一个，但是每次希望的是增幅尽量小；要让增幅尽量小，那么就尽量在低位进行操作，尽量保持高位不变。</p></blockquote></li><li><p>为什么要寻找一个 满足 nums[i]&lt; nums[i+1] 一个下标 i？为什么 要 从下标 i+1 到 end这段寻找一个数 nums[k]&gt; nums[i]</p><blockquote><p>找i这个的目的就是寻找一个较小的数，可以看的出这个下标的右边都是降序排序，如果将右边内任意两个数进行swap，那么会比原来变的小，而我们寻找的是比原数大的。比如[1,2,7,4,3,1],我们进行第一步后，寻找到的下标为1，对应的值nums[1] = 2, 2右边任意两个数进行swap会比原来变的小</p><p>找到i后我们去在i的右边找一个刚刚好比nums[i]大的这个数，这个数比nums[i]大，但只好刚刚大一点，也就是说在大的情况下尽量小。</p><p>较小的数在前面，较大数在后面，这样交换后才会比原数大，这就是后面进行交换的原因。</p></blockquote></li><li><p>为什么最后翻转 nums[k+1:]</p><blockquote><p>nums[k+1:]是一个降序，但只有当它是纯升序时，这才更贴近原数(增幅小)</p></blockquote></li></ol><h1 id="正向推题解">3 正向推题解</h1><p>重点理解一下1，2步：</p><p>问题的本质是交换原序列中两个数以及施加可能的排序操作，使得变换后的序列刚刚好比原数大。</p><p>交换序列中两个数的过程中我们尽量要保证高位保持不变，低位进行交换操作，所有倒序遍历势在必行。</p><p>通过交换使得比原数大，那么就得在前面寻找一个 小数，后面寻找一个大数。【大数与小数是两个之间相对来说得】。</p><p>那么问题又来了，这样交换可以使得变大，但是如何交换才能更加贴近原数，以及如何寻找这两个数呢？ 解决办法来了，从后往前遍历，找一个数 small_val 使得这个数得右边是个降序，然后在这个降序序列中又寻找一个刚刚好比small_val 大得数 big_val。交换。交换后将后面部分变为纯升序使得更加贴近原数。</p><hr><h1 id="源码">4 源码</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify nums in-place instead.        """</span>        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        small_index<span class="token punctuation">,</span> big_index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        nums_len <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 寻找较小数的下标</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>nums_len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                small_index <span class="token operator">=</span> i                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># nums本身是一个降序排序， 不存在,对nums进行 原地排序</span>        <span class="token keyword">if</span> small_index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment" spellcheck="true"># 寻找较大 数的下标</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>nums_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> small_index<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>small_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                big_index <span class="token operator">=</span> i                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># swap</span>        nums<span class="token punctuation">[</span>small_index<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>big_index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>big_index<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>small_index<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 后面进行sort</span>        reverse<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> small_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>nextPermutation<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    solution<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="总结">5 总结</h1><p>原题链接：</p><h4 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31. 下一个排列"></a><a href="https://leetcode-cn.com/problems/next-permutation/">31. 下一个排列</a></h4><p><a href="https://leetcode-cn.com/problems/next-permutation/solution/xia-yi-ge-pai-lie-by-powcai/">参考</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily_leetcode_2020_1108_122_买卖股票的最佳时机</title>
      <link href="/2020/11/10/daily-leetcode-2020-1108-122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>/2020/11/10/daily-leetcode-2020-1108-122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述">1 题目描述</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）</p><pre><code>输入: [7,1,5,3,6,4]输出: 7解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。&nbsp;    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。输入: [1,2,3,4,5]输出: 4解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。&nbsp;    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。&nbsp;    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。提示：1 &lt;= prices.length &lt;= 3 * 10 ^ 40 &lt;= prices[i] &lt;= 10 ^ 4</code></pre><h1 id="题目分析">2 题目分析</h1><h2 id="贪心">2.1 贪心</h2><p>因为我们已经有了预知能力，只有明天的价格比今天高，就有利可图，我们就买今天的股票，然后到明天再卖出。则利润为<code>prices[i+1]-prices[i]</code>,到最后一天（以后的那些天价格都没有这一天价格高了，即峰值），我们会将昨天preices[j-1]拥有的股票以今天的价格prices[j]卖出,那么获得的利润<code>prices[j]-prices[j-1]</code>,然后再也不买股票了(<strong>明天的价格比今天高</strong> 这个条件再也不符合了)。</p><p>说人话就是，只要今天的价格比昨天高，你只管往出卖就有钱赚，具体哪一天买卖操那闲心干啥。</p><p>贪心算法在此的本质是吸取正利润区间，也就是今天价格比昨天高的这种小区间</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 贪心</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>                res <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res</code></pre><h2 id="动态规划">2.2 动态规划</h2><p>动态规划的重点在于寻找状态转移方程，那么我们就第i的状态作以分析。</p><p>在第i天，股票的状态有两种，持有和没有。而每种状态小分两个小情况。我们以dp[i][0]来表示持有的状态时的最大利润，dp[i][1]来表示 不持有的状态时的最大利润。</p><ol><li><p>持有</p><blockquote><ol><li><p>昨天就持有，今天没有卖出，</p><p>那么目前的利润是 昨天有的时的最大利润，  dp[i-1][0]</p></li><li><p>昨天没有的，今天新买的</p><p>那么目前的利润是  昨天不持有时的最大利润  - 今天的支出， dp[i-1][1] - prices[i]</p></li></ol></blockquote></li><li><p>不持有</p><blockquote><ol><li><p>昨天就没有，今天也没有买</p><p>那目前的利润就是  昨天没有时的最大利润 ， dp[i-1][1]</p></li><li><p>昨天有的，今天卖掉了</p><p>那目前的利润就是 昨天有时的最大利润 + 今天卖出的 ， dp[i-1][0] + price[i]</p></li></ol></blockquote></li></ol><p>通过上面的分析，我们得到了状态转移方程，那么什么最后的我需要的状态时怎样的，肯定时把手里股票卖干净时的状态。即dp[n][1],</p><p>同时，初始状态应该时怎样的，第1天不持有股票故让dp[0][1]=0, 第一天持有股票则dp[0][0] = - preices[0](即第一天买了股票)</p><p>根据上面的分析，我们可以写处如下的代码：</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">dp_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>        prices_len <span class="token operator">=</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>prices_len<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># init dp[0]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> prices_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><p>上面的代码种，我们要开辟一个n*2的list，但是实际上我们用四个变量不断覆盖就能完成更新操作，改进的代码如下。</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">dp_method2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp_has<span class="token punctuation">,</span> dp_noHas <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp_has_new <span class="token operator">=</span> max<span class="token punctuation">(</span>dp_has<span class="token punctuation">,</span> dp_noHas <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp_noHas_new <span class="token operator">=</span> max<span class="token punctuation">(</span>dp_noHas<span class="token punctuation">,</span> dp_has <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            dp_has <span class="token operator">=</span> dp_has_new            dp_noHas <span class="token operator">=</span> dp_noHas_new        <span class="token keyword">return</span> dp_noHas</code></pre><h1 id="总结">3 总结</h1><p>动态规划的关键点在于寻找状态方程，例如 最大礼物和，编辑距离等经典题都是如此，改天抽个时间做个总结</p><p>原题链接:</p><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily-leetCode-2020-1109-973-最接近原点的k个点</title>
      <link href="/2020/11/09/daily-leetCode-2020-1109-973-%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84k%E4%B8%AA%E7%82%B9/"/>
      <url>/2020/11/09/daily-leetCode-2020-1109-973-%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84k%E4%B8%AA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述">1 题目描述</h1><p>我们有一个由平面上的点组成的列表 points。需要从中找出 K 个距离原点 (0, 0) 最近的点。</p><p>（这里，平面上两点之间的距离是欧几里德距离。）</p><p>你可以按任何顺序返回答案。除了点坐标的顺序之外，答案确保是唯一的。</p><pre><code>输入：points = [[1,3],[-2,2]], K = 1输出：[[-2,2]]解释： (1, 3) 和原点之间的距离为 sqrt(10)，(-2, 2) 和原点之间的距离为 sqrt(8)，由于 sqrt(8) &lt; sqrt(10)，(-2, 2) 离原点更近。我们只需要距离原点最近的 K = 1 个点，所以答案就是 [[-2,2]]。输入：points = [[3,3],[5,-1],[-2,4]], K = 2输出：[[3,3],[-2,4]]（答案 [[-2,4],[3,3]] 也会被接受。）提示1 &lt;= K &lt;= points.length &lt;= 10000-10000 &lt; points[i][0] &lt; 10000-10000 &lt; points[i][1] &lt; 10000</code></pre><h1 id="分析题目">2 分析题目</h1><p>topK问题，排序取前k个。</p><p>优化/简化</p><ol><li>因为计算到原点的距离，所以可以这样写： sqrt(x[0]**2+x[1]**2)</li><li>开平方增加了计算时间，同时还失去精度，所以可以这样写 x[0]**2+x[1]**2</li></ol><h1 id="源码">3 源码</h1><h2 id="优雅的python">3.1 优雅的python</h2><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">kClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" method1 """</span>        <span class="token comment" spellcheck="true"># points.sort(key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=False)</span>        <span class="token comment" spellcheck="true"># return points[:K]</span>        <span class="token triple-quoted-string string">""" method 2"""</span>        <span class="token keyword">return</span> sorted<span class="token punctuation">(</span>points<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>K<span class="token punctuation">]</span></code></pre><p>代码已经很清晰了，这里简单说下 <code>sort，sorted</code>的区别，<code>sort</code>是属于list的方法，是原地操作，<code>sorted</code>返回的是一个新的迭代器，适用于任何可迭代对象。</p><h2 id="快速排序">3.2 快速排序</h2><p>这里可以用快速排序来解决。每次用 快排的<code>partition</code>返回排序用于此轮比较元素的的下标index，这轮比较后：比这个元素大的放其后面，比其小的放前面；当index== K-1时，说明前k个元素已经满足要求；比k-1小时，去index的右边寻找，比k-1大时，去index的左边寻找。</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        快排下标        :param nums:  待排序 list        :param start:  开始下标        :param end:  结束下标        :return:  a number , index        """</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> start<span class="token punctuation">,</span> end        head_dist <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> end <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> head_dist<span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">></span> start <span class="token operator">and</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">></span> head_dist<span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span> j<span class="token punctuation">:</span>                <span class="token keyword">break</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span>        <span class="token keyword">return</span> j    <span class="token keyword">def</span> <span class="token function">quick_sort_k</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param nums:        :param start:        :param end:        :param k:        :return:        """</span>        index <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>quick_sort_k<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token keyword">if</span> index <span class="token operator">&lt;</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>quick_sort_k<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span>                                                                                                  index<span class="token number">-1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></code></pre><h2 id="优先队列">3.3 优先队列</h2><blockquote><p>使用一个优先队列实时维护前 K 个最小的距离平方。</p><p>首先我们将前 K 个点的编号以及对应的距离平方放入优先队列中，随后从第K+1 个点开始遍历：如果当前点的距离平方比堆顶的点的距离平方要小，就把堆顶的点弹出，再插入当前的点。当遍历完成后，所有在优先队列中的点就是前 KK 个距离最小的点。</p></blockquote><pre class=" language-python"><code class="language-python">        <span class="token keyword">import</span> heapq        q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token punctuation">:</span>K<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>K<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            dist <span class="token operator">=</span> <span class="token operator">-</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> y <span class="token operator">**</span> <span class="token number">2</span>            heapq<span class="token punctuation">.</span>heappushpop<span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token punctuation">(</span>dist<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span>points<span class="token punctuation">[</span>identity<span class="token punctuation">]</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> identity<span class="token punctuation">)</span> <span class="token keyword">in</span> q<span class="token punctuation">]</span>        <span class="token keyword">return</span> ans</code></pre><p><strong>heapq 优先队列为小根堆</strong></p><h1 id="总结">4 总结</h1><blockquote><p>这题和剑指offer40最小的K个数几乎一摸一样，掌握快速排序、优先队列是重点，常规解法并不能使面试官满意。另外用到快排变形的题还有 “找出数组中出现次数超过一半的那个数”</p></blockquote><p>原题链接：</p><h4 id="973-最接近原点的-K-个点"><a href="#973-最接近原点的-K-个点" class="headerlink" title="973. 最接近原点的 K 个点"></a><a href="https://leetcode-cn.com/problems/k-closest-points-to-origin/">973. 最接近原点的 K 个点</a></h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala的serializable</title>
      <link href="/2020/11/09/scala%E7%9A%84serializable/"/>
      <url>/2020/11/09/scala%E7%9A%84serializable/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是序列化">1 什么是序列化</h1><p><strong>把原本在内存中的对象状态 变成可存储或传输的过程称之为序列化。序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</strong></p><p>实现序列化的两个原因：</p><blockquote><ol><li>将对象的状态保存在存储媒体中以便可以在以后重新创建出完全相同的副本；</li><li>按值将对象从一个应用程序域发送至另一个应用程序域。实现serializabel接口的作用是就是可以把对象存到字节流，然后可以恢复，所以你想如果你的对象没实现序列化怎么才能进行持久化和网络传输呢，要持久化和网络传输就得转为字节流，所以在分布式应用中及设计数据持久化的场景中，就得实现序列化。</li></ol></blockquote><h1 id="Scala-和-java-序列化">2 Scala 和 java 序列化</h1><p><strong>java <code>serializable</code></strong></p><blockquote><p>最好显示地指定 UID</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>scala serializable</strong></p><blockquote><p>scala 序列化需要扩展Serializable 特质， 并加@Serializable 注解</p></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token annotation punctuation">@SerialVersionUID</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token keyword">class</span> Stock<span class="token punctuation">(</span><span class="token keyword">var</span> symbol<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> price<span class="token operator">:</span> BigDecimal<span class="token punctuation">)</span> <span class="token keyword">extends</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// code here ...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">// create a serializable Stock class</span><span class="token annotation punctuation">@SerialVersionUID</span><span class="token punctuation">(</span><span class="token number">123L</span><span class="token punctuation">)</span><span class="token keyword">class</span> Stock<span class="token punctuation">(</span><span class="token keyword">var</span> symbol<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">var</span> price<span class="token operator">:</span> BigDecimal<span class="token punctuation">)</span> <span class="token keyword">extends</span> Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> f<span class="token string">"$symbol%s is $&amp;#123;price.toDouble&amp;#125;%.2f"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> SerializationDemo <span class="token keyword">extends</span> App <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// (1) create a Stock instance</span>    <span class="token keyword">val</span> nflx <span class="token operator">=</span> <span class="token keyword">new</span> Stock<span class="token punctuation">(</span><span class="token string">"NFLX"</span><span class="token punctuation">,</span> BigDecimal<span class="token punctuation">(</span><span class="token number">85.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// (2) write the instance out to a file</span>    <span class="token keyword">val</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> ObjectOutputStream<span class="token punctuation">(</span><span class="token keyword">new</span> FileOutputStream<span class="token punctuation">(</span><span class="token string">"/tmp/nflx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    oos<span class="token punctuation">.</span>writeObject<span class="token punctuation">(</span>nflx<span class="token punctuation">)</span>    oos<span class="token punctuation">.</span>close    <span class="token comment" spellcheck="true">// (3) read the object back in</span>    <span class="token keyword">val</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> ObjectInputStream<span class="token punctuation">(</span><span class="token keyword">new</span> FileInputStream<span class="token punctuation">(</span><span class="token string">"/tmp/nflx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> stock <span class="token operator">=</span> ois<span class="token punctuation">.</span>readObject<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Stock<span class="token punctuation">]</span>    ois<span class="token punctuation">.</span>close    <span class="token comment" spellcheck="true">// (4) print the object that was read back in</span>    println<span class="token punctuation">(</span>stock<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// NFLX is 85.00</span></code></pre><p>serializableUID的理解：</p><blockquote><p><code>serialVersionUID</code>是用来辅助对象的序列化与反序列化的，原则上序列化后的数据当中的<code>serialVersionUID</code>与当前类当中的<code>serialVersionUID</code>一致，那么该对象才能被反序列化成功。这个<code>serialVersionUID</code>的详细的工作机制是：在序列化的时候系统将<code>serialVersionUID</code>写入到序列化的文件中去，当反序列化的时候系统会先去检测文件中的<code>serialVersionUID</code>是否跟原对象的<code>serialVersionUID</code>是否一致，如果一直则反序列化成功，否则就说明当前类跟序列化后的类发生了变化。</p></blockquote><h1 id="序列化读写">3 序列化读写</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//序列化过程</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"user.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反序列化过程</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fromSerial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"user.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="自定义序列化">4 自定义序列化</h1><p>默认序列化会序列化所有的成员变量，或是当对象的实例变量引用了其他对象，那么序列化该对象的过程中也会把引用对象进行序列化，那么问题来了，1.我们不想序列化一些信息，比如关键的隐私信息，2. 当实例变量引用了大量的其他对象，那么序列化的成本也是很高的。 下面就简单说三种 自定义序列化方式。</p><h2 id="transient关键字">4.1 transient关键字</h2><blockquote><p>当某个字段被声明为 transient时，那么机制就会忽略它，对它不进行序列化</p></blockquote><h2 id="writeObject-方法与readObject-方法">4.2 writeObject()方法与readObject()方法</h2><p>解释下面代码</p><blockquote><p>我们将 age字段声明为了 transient，那么机制不会去序列化它，但是我们在类中多加了两个方法writeObject()方法与readObject()方法</p><p>我们在 <code>writeObject</code>中调用 ObjectOutputStream的ObjectOutputStream方法写进行序列化的写操作，因为 age 字段被声明了 trasient,此时会忽略它，而紧跟其后，我们又调用了 wirteInt方法，显示地将 age字段进行了序列化。在readObject中同理。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>   <span class="token keyword">class</span>  <span class="token class-name">Person</span>  <span class="token keyword">implements</span>  <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span>  String name  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">private</span>  Integer age  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">private</span>  Gender gender  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">public</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" none-arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span>  <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Gender gender<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>name  <span class="token operator">=</span>  name<span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>age  <span class="token operator">=</span>  age<span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>gender  <span class="token operator">=</span>  gender<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// writeObject()方法与readObject()方法</span><span class="token keyword">public</span>   <span class="token keyword">class</span>  <span class="token class-name">Person</span>  <span class="token keyword">implements</span>  <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">transient</span>   <span class="token keyword">private</span>  Integer age  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">private</span>   <span class="token keyword">void</span>  <span class="token function">writeObject</span><span class="token punctuation">(</span>ObjectOutputStream out<span class="token punctuation">)</span>  <span class="token keyword">throws</span>  IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">private</span>   <span class="token keyword">void</span>  <span class="token function">readObject</span><span class="token punctuation">(</span>ObjectInputStream in<span class="token punctuation">)</span>  <span class="token keyword">throws</span>  IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age  <span class="token operator">=</span>  in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Externalizable接口">4.3 Externalizable接口</h2><p><code>Externalizable</code>是继承自<code>Serializable</code>, 实现 <code>Externalizable</code>重写其两个方法，<code>writeExternal 、readExternal</code></p><p>下面这段代码中，对name与age字段进行序列化，忽略掉gender字段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>   <span class="token keyword">class</span>  <span class="token class-name">Person</span>  <span class="token keyword">implements</span>  <span class="token class-name">Externalizable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span>  String name  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">transient</span>   <span class="token keyword">private</span>  Integer age  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">private</span>  Gender gender  <span class="token operator">=</span>   null <span class="token punctuation">;</span>     <span class="token keyword">public</span>  <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" none-arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span>  <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Gender gender<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>name  <span class="token operator">=</span>  name<span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>age  <span class="token operator">=</span>  age<span class="token punctuation">;</span>         <span class="token keyword">this</span> <span class="token punctuation">.</span>gender  <span class="token operator">=</span>  gender<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span>   <span class="token keyword">void</span>  <span class="token function">writeExternal</span><span class="token punctuation">(</span>ObjectOutput out<span class="token punctuation">)</span>  <span class="token keyword">throws</span>  IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span>   <span class="token keyword">void</span>  <span class="token function">readExternal</span><span class="token punctuation">(</span>ObjectInput in<span class="token punctuation">)</span>  <span class="token keyword">throws</span>  IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name  <span class="token operator">=</span>  <span class="token punctuation">(</span>String<span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age  <span class="token operator">=</span>  in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*arg constructornone - arg constructor[John,  31 ,  null ]*/</span></code></pre><p><strong>若使用Externalizable进行序列化，当读取对象时，会调用被序列化类的无参构造器去创建一个新的对象，然后再将被保存对象的字段的值分别填充到新对象中。这就是为什么在此次序列化过程中Person类的无参构造器会被调用。由于这个原因，实现Externalizable接口的类必须要提供一个无参的构造器，且它的访问权限为public。</strong></p><h1 id="readSolve（）方法">5 readSolve（）方法</h1><p> 当我们使用Singleton模式时，应该是期望某个类的实例应该是唯一的，但如果该类是可序列化的，那么情况可能会略有不同。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">final</span> Person instatnce <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">" John "</span> <span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span> Person <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> InstanceHolder<span class="token punctuation">.</span>instatnce<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String name <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer age <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> Gender gender <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" none-arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Gender gender<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">SimpleSerial</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    File file <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span> <span class="token string">" person.out "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    ObjectOutputStream oout <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oout<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存单例对象</span>    oout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ObjectInputStream oin <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Object newPerson <span class="token operator">=</span> oin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  oin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> newPerson<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将获取的对象与Person类中的单例对象进行相等性比较</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*arg constructor[John,  31 , MALE]false*/</span></code></pre><hr><p><strong>从文件person.out中获取的Person对象与Person类中的单例对象并不相等。为了能在序列化过程仍能保持单例的特性，可以在Person类中添加一个readResolve()方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">class</span> <span class="token class-name">InstanceHolder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">final</span> Person instatnce <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token string">" John "</span> <span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">,</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">public</span>  <span class="token keyword">static</span> Person <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> InstanceHolder<span class="token punctuation">.</span>instatnce<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> String name <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer age <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> Gender gender <span class="token operator">=</span>  null <span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" none-arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Gender gender<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token string">" arg constructor "</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>     <span class="token keyword">this</span> <span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> Object <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ObjectStreamException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> InstanceHolder<span class="token punctuation">.</span>instatnce<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*arg constructor[John,  31 , MALE]true*/</span></code></pre><p><strong>无论是实现Serializable接口，或是Externalizable接口，当从I/O流中读取对象时，readResolve()方法都会被调用。反序列化的过程实际上就是用readResolve()中返回的对象直接替换在反序列化过程中创建的对象，而被创建的对象则会被垃圾回收掉。</strong></p><h1 id="总结">6 总结</h1><ol><li>序列化作用的对象是类的实例.对实例进行序列化,就是保存实例当前在内存中的状态.包括实例的每一个属性的值和引用等.</li><li>想要实现序列化必须实现Serializable接口，</li><li>序列化时，只对对象的状态进行保存，而不管对象的方法；</li><li>当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</li><li>默认序列化机制中当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化； </li><li>序列化会忽略静态变量，即序列化不保存静态变量的状态。静态成员属于类级别的，不能序列化。添加了static、transient关键字后的变量不能序列化。</li></ol><h1 id="参考">7 参考</h1><ol><li><a href="https://alvinalexander.com/scala/how-to-use-serialization-in-scala-serializable-trait/">Scala Serializable的使用</a></li><li><a href="https://blog.csdn.net/dreamtdp/article/details/15378329?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param">对Java Serializable（序列化）的理解和总结</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala断言和参数检查</title>
      <link href="/2020/11/07/scala%E6%96%AD%E8%A8%80%E5%92%8C%E5%8F%82%E6%95%B0%E6%A3%80%E6%9F%A5/"/>
      <url>/2020/11/07/scala%E6%96%AD%E8%A8%80%E5%92%8C%E5%8F%82%E6%95%B0%E6%A3%80%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>scala 的参数检查与断言: require, assert, assume 和 ensuring</p><p>总结：</p><blockquote><p><strong>require() 方法用在对参数的检验上，不通过则抛出 IllegalArgumentException</strong></p><p><strong><code>assert()</code> 或 <code>assume()</code> 方法在对中间结果或私有方法的参数进行检验，不成功则抛出 <code>AssertionError</code> 异常</strong></p></blockquote><blockquote><p><strong><code>ensuring() </code>方法在返回结果的分支的花括号同一行上进行断言. ensuring 是用来对返回结果行断言的，所以它必须尾随返回结果处,nsuring 中用 “_” 作为当前返回结果对象的占位符</strong></p><p><strong><code>ensuring</code>应该放在返回结果分支的花括号后面，如果没有花括号，应该造花括号让它跟，或是写在函数后最后那个花括号的后面</strong></p><p><strong>要使用<code>ensuring()</code>, 则必须有<code>{}</code></strong></p><hr></blockquote><pre class=" language-scala"><code class="language-scala"><span class="token keyword">private</span> <span class="token keyword">def</span> widen<span class="token punctuation">(</span>w<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Element <span class="token operator">=</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> width<span class="token punctuation">)</span>        <span class="token keyword">this</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> left <span class="token operator">=</span> elem<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> width<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span>        <span class="token keyword">var</span> right <span class="token operator">=</span> elem<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> width <span class="token operator">-</span>left<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>        left beside <span class="token keyword">this</span> beside right    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ensuring <span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> _<span class="token punctuation">.</span>width<span class="token punctuation">)</span> </code></pre><pre class=" language-scala"><code class="language-scala"><span class="token keyword">private</span> <span class="token keyword">def</span> widen<span class="token punctuation">(</span>w<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Element <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> width<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ensuring<span class="token punctuation">(</span>_<span class="token punctuation">.</span>width <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里欲断言返回结果 this，所有两 if 后的花括号不能省略</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> left <span class="token operator">=</span> elem<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> width<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> height<span class="token punctuation">)</span>        <span class="token keyword">var</span> right <span class="token operator">=</span> elem<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>w <span class="token operator">-</span> width <span class="token operator">-</span> left<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>        left beside <span class="token keyword">this</span> beside right    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ensuring<span class="token punctuation">(</span>w <span class="token operator">&lt;=</span> _<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//断言的是上一行 left beside this beside right 结果</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> ensuring<span class="token punctuation">(</span><span class="token punctuation">(</span>w <span class="token operator">+</span> _<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ensuring 断言可以放在方法体外了，用来断言最终的结果</span></code></pre><p>参考：</p><p><a href="https://yanbin.blog/scala-parameter-check-and-assertion/">参考</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala的reflect</title>
      <link href="/2020/11/07/scala%E7%9A%84reflect/"/>
      <url>/2020/11/07/scala%E7%9A%84reflect/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要reflect">1 为什么需要reflect</h1><p>Scala是基于JVM的语言, Scala编译器会将Scala代码编译成JVM字节码, 而JVM编译过程中JVM中的泛型并不会保存。下面这段代码并不会通过</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">class</span> ScalaDemo<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> makeTArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>那么问题来了，假如我们有一种对象可以保存泛型信息，不就解决了吗，那么解决办法来了，这些对象就是<code>ClassTag 、Manifest、ClassManifest、TypeTag</code></p><p><strong>反射作用三部曲</strong>：</p><blockquote><p>捕获对象、泛型类型信息</p><p>根据捕获信息实例化新对象</p><p>通过实例操作对象的属性和方法</p></blockquote><p>反射的种类：</p><p>1、scala.reflect.runtime.universe 运行时的反射</p><p>2、scala.reflect.marcos.universe编译期的反射</p><h1 id="运行期时反射">2 运行期时反射</h1><p>我们重点讲解运行期反射:</p><p>Scala运行时类型信息是保存在TypeTag对象中, 编译器在编译过程中将类型信息保存到TypeTag中, 并将其携带到运行期. 通过TypeTag的 <code>typeTag</code>方法获得需要的Type(如果不是从对象换取Type 而是从class中获得 可以直接用 typeOf[类名])</p><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>scala<span class="token operator">></span> <span class="token keyword">def</span> getType<span class="token punctuation">[</span>T<span class="token operator">:</span>TypeTag<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">=</span> typeTag<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token keyword">def</span> getType<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> evidence$<span class="token number">1</span><span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>T<span class="token punctuation">]</span>scala<span class="token operator">></span> getType<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">val</span> res1<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> TypeTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>scala<span class="token operator">></span> <span class="token keyword">def</span> getType1<span class="token punctuation">[</span>T<span class="token operator">:</span> TypeTag<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">=</span> typeOf<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token keyword">def</span> getType1<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> evidence$<span class="token number">1</span><span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>Typescala<span class="token operator">></span> getType1<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">val</span> res2<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>Type <span class="token operator">=</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span></code></pre><p>想要获得擦除后的类型信息, 可以使用<code>ClassTag</code></p><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>_<span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>_scala<span class="token operator">></span> <span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_<span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_scala<span class="token operator">></span> <span class="token keyword">val</span> tpeTag <span class="token operator">=</span> typeTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>tpeTag<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> TypeTag<span class="token punctuation">[</span>scala<span class="token punctuation">.</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>scala<span class="token operator">></span> <span class="token keyword">val</span> clsTag <span class="token operator">=</span> classTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>clsTag<span class="token operator">:</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>ClassTag<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Listscala<span class="token operator">></span> clsTag<span class="token punctuation">.</span>runtimeClassres12<span class="token operator">:</span> Class<span class="token punctuation">[</span>_<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">class</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>Listscala<span class="token operator">></span> classOf<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>res0<span class="token operator">:</span> Class<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">class</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>immutable<span class="token punctuation">.</span>List</code></pre><h1 id="反射的实际应用">3 反射的实际应用</h1><h2 id="运行时类型实例化">3.1 运行时类型实例化</h2><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">case</span> <span class="token keyword">class</span> Fruits<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>defined <span class="token keyword">class</span> Fruitsscala<span class="token operator">></span> <span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_<span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">// 获得当前JVM中的所有类镜像</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rm <span class="token operator">=</span> runtimeMirror<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getClassLoader<span class="token punctuation">)</span>rm<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>Mirror <span class="token operator">=</span> JavaMirror <span class="token keyword">with</span> scala<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>nsc<span class="token punctuation">.</span>interpreter<span class="token punctuation">.</span>IMain$TranslatingClassLoader<span class="token annotation punctuation">@566edb2e</span> of <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 获得`Fruits`的类型符号, 并指定为class类型</span>scala<span class="token operator">></span> <span class="token keyword">val</span> classFruits <span class="token operator">=</span> typeOf<span class="token punctuation">[</span>Fruits<span class="token punctuation">]</span><span class="token punctuation">.</span>typeSymbol<span class="token punctuation">.</span>asClassclassFruits<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>ClassSymbol <span class="token operator">=</span> <span class="token keyword">class</span> Fruits<span class="token comment" spellcheck="true">// 根据上一步的符号, 从所有的类镜像中, 取出`Fruits`的类镜像</span><span class="token keyword">val</span> cm <span class="token operator">=</span> rm<span class="token punctuation">.</span>reflectClass<span class="token punctuation">(</span>classFruits<span class="token punctuation">)</span>cm<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>ClassMirror <span class="token operator">=</span> <span class="token keyword">class</span> mirror <span class="token keyword">for</span> Fruits <span class="token punctuation">(</span>bound to <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获得`Fruits`的构造函数, 并指定为asMethod类型</span>scala<span class="token operator">></span> <span class="token keyword">val</span> ctor <span class="token operator">=</span> typeOf<span class="token punctuation">[</span>Fruits<span class="token punctuation">]</span><span class="token punctuation">.</span>declaration<span class="token punctuation">(</span>nme<span class="token punctuation">.</span>CONSTRUCTOR<span class="token punctuation">)</span><span class="token punctuation">.</span>asMethodctor<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>MethodSymbol <span class="token operator">=</span> constructor Fruits<span class="token comment" spellcheck="true">// 根据上一步的符号, 从`Fruits`的类镜像中, 取出一个方法(也就是构造函数)</span>scala<span class="token operator">></span> <span class="token keyword">val</span> ctorm <span class="token operator">=</span> cm<span class="token punctuation">.</span>reflectConstructor<span class="token punctuation">(</span>ctor<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用构造函数, 反射生成类实例, 完成</span>scala<span class="token operator">></span> ctorm<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">)</span>res2<span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> Fruits<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>apple<span class="token punctuation">)</span></code></pre><h2 id="运行时类成员操作">3.2 运行时类成员操作</h2><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">case</span> <span class="token keyword">class</span> Fruits<span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>defined <span class="token keyword">class</span> Fruitsscala<span class="token operator">></span> <span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_<span class="token keyword">import</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">// 获得当前JVM中的所有类镜像</span>scala<span class="token operator">></span> <span class="token keyword">val</span> rm <span class="token operator">=</span> runtimeMirror<span class="token punctuation">(</span>getClass<span class="token punctuation">.</span>getClassLoader<span class="token punctuation">)</span>rm<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>Mirror <span class="token operator">=</span> JavaMirror <span class="token keyword">with</span> scala<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>nsc<span class="token punctuation">.</span>interpreter<span class="token punctuation">.</span>IMain$TranslatingClassLoader<span class="token annotation punctuation">@566edb2e</span> of <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 生成一个`Fruits`的实例</span>scala<span class="token operator">></span> <span class="token keyword">val</span> fruits <span class="token operator">=</span> Fruits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span>fruits<span class="token operator">:</span> Fruits <span class="token operator">=</span> Fruits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>banana<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据`Fruits`的实例生成实例镜像</span><span class="token keyword">val</span> instm <span class="token operator">=</span> rm<span class="token punctuation">.</span>reflect<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span>instm<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>InstanceMirror <span class="token operator">=</span> instance mirror <span class="token keyword">for</span> Fruits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>banana<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获得`Fruits`中, 名字为name的成员信息, 并指定为asTerm类型符号</span>scala<span class="token operator">></span> <span class="token keyword">val</span> nameTermSymbol <span class="token operator">=</span> typeOf<span class="token punctuation">[</span>Fruits<span class="token punctuation">]</span><span class="token punctuation">.</span>declaration<span class="token punctuation">(</span>newTermName<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asTermnameTermSymbol<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TermSymbol <span class="token operator">=</span> value name<span class="token comment" spellcheck="true">// 根据上一步的符号, 从`Fruits`的实例镜像中, 取出一个成员的指针</span>scala<span class="token operator">></span> <span class="token keyword">val</span> nameFieldMirror <span class="token operator">=</span> instm<span class="token punctuation">.</span>reflectField<span class="token punctuation">(</span>nameTermSymbol<span class="token punctuation">)</span>nameFieldMirror<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>FieldMirror <span class="token operator">=</span> field mirror <span class="token keyword">for</span> <span class="token keyword">private</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span> <span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token punctuation">(</span>bound to Fruits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>banana<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通过get方法访问成员信息</span>scala<span class="token operator">></span> nameFieldMirror<span class="token punctuation">.</span>getres3<span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> banana<span class="token comment" spellcheck="true">// 通过set方法, 改变成员信息</span>scala<span class="token operator">></span> nameFieldMirror<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 再次查询, 发现成员的值已经改变, 即便是val, 在反射中也可以改变</span>scala<span class="token operator">></span> nameFieldMirror<span class="token punctuation">.</span>getres6<span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> apple</code></pre><h2 id="运行时方法操作">3.3 运行时方法操作</h2><pre class=" language-scala"><code class="language-scala">  <span class="token keyword">def</span> getMethod<span class="token punctuation">(</span>className<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> methodName<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> universe<span class="token punctuation">.</span>MethodMirror <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取实例</span>    <span class="token keyword">val</span> classInstance <span class="token operator">=</span> Class<span class="token punctuation">.</span>forName<span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span>newInstance<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实例镜像</span>    <span class="token keyword">val</span> instanceMirror <span class="token operator">=</span> runtimeMirror<span class="token punctuation">.</span>reflect<span class="token punctuation">(</span>classInstance<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 全局可访问类符号</span>    <span class="token keyword">val</span> classSymbol <span class="token operator">=</span> runtimeMirror<span class="token punctuation">.</span>staticClass<span class="token punctuation">(</span>className<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 方法符号</span>    <span class="token keyword">val</span> methodSymbol <span class="token operator">=</span> classSymbol<span class="token punctuation">.</span>selfType<span class="token punctuation">.</span>decl<span class="token punctuation">(</span>scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TermName<span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asMethod    <span class="token comment" spellcheck="true">// 反射</span>    instanceMirror<span class="token punctuation">.</span>reflectMethod<span class="token punctuation">(</span>methodSymbol<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="ClassTag-、Manifest、ClassManifest、TypeTag">4 ClassTag 、Manifest、ClassManifest、TypeTag</h1><p>scala在2.10用TypeTag替代了Manifest，用ClassTag替代了ClassManifest.原因是在路径依赖类型中，Manifest存在问题</p><p>下面这个实例中 <code>mfun(f1)(b1) == mfun(f2)(b2)</code> 理应是 <code>false</code>,因为b1和b2依赖的外部实例是不一样的。</p><pre class=" language-scala"><code class="language-scala">scala<span class="token operator">></span> <span class="token keyword">class</span> Foo<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">class</span> Bar<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>defined <span class="token keyword">class</span> Fooscala<span class="token operator">></span> <span class="token keyword">val</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> Foo<span class="token punctuation">;</span><span class="token keyword">val</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> f1<span class="token punctuation">.</span>Barf1<span class="token operator">:</span> Foo <span class="token operator">=</span> Foo<span class="token annotation punctuation">@994f7fd</span>b1<span class="token operator">:</span> f1<span class="token punctuation">.</span>Bar <span class="token operator">=</span> Foo$Bar<span class="token annotation punctuation">@1fc0e258</span>scala<span class="token operator">></span> <span class="token keyword">val</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> Foo<span class="token punctuation">;</span><span class="token keyword">val</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> f2<span class="token punctuation">.</span>Barf2<span class="token operator">:</span> Foo <span class="token operator">=</span> Foo<span class="token annotation punctuation">@ecd59a3</span>b2<span class="token operator">:</span> f2<span class="token punctuation">.</span>Bar <span class="token operator">=</span> Foo$Bar<span class="token annotation punctuation">@15c882e8</span>scala<span class="token operator">></span> <span class="token keyword">def</span> mfun<span class="token punctuation">(</span>f<span class="token operator">:</span> Foo<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">:</span> f<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> ev<span class="token operator">:</span> Manifest<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> evmfun<span class="token operator">:</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> Foo<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">:</span> f<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> ev<span class="token operator">:</span> scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Manifest<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span><span class="token punctuation">)</span>scala<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Manifest<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span>scala<span class="token operator">></span> <span class="token keyword">def</span> tfun<span class="token punctuation">(</span>f<span class="token operator">:</span> Foo<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">:</span> f<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> ev<span class="token operator">:</span> TypeTag<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> evtfun<span class="token operator">:</span> <span class="token punctuation">(</span>f<span class="token operator">:</span> Foo<span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token operator">:</span> f<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">implicit</span> ev<span class="token operator">:</span> reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span><span class="token punctuation">)</span>reflect<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>universe<span class="token punctuation">.</span>TypeTag<span class="token punctuation">[</span>f<span class="token punctuation">.</span>Bar<span class="token punctuation">]</span>scala<span class="token operator">></span> mfun<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token operator">==</span> mfun<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>res14<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>scala<span class="token operator">></span> tfun<span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token operator">==</span> tfun<span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span>res15<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span></code></pre><blockquote><p><code>ClassManifest</code>是<code>Manifest</code>的一个弱化版本，保存的类型信息不如<code>Manifest</code>多, 而<code>ClassTag</code>是<code>TypeTag</code>的一个弱化版本.在实际应用中，SparkContext大量使用<code>ClassTag</code>保存泛型信息，一般情况下<code>ClassTag</code>就满足我们使用。</p></blockquote><h1 id="总结">5 总结</h1><blockquote><ol><li><p><code>ClassTag</code> 可以获取擦除后的类型信息，再<code>scala.reflect</code>中，有<code>classTag</code>和<code>classof</code>两个主要方法</p></li><li><p><code>TypeTag</code>获取运行时的类型信息，在<code>scala.reflect.runtime.universe</code>中，有<code>typeTag</code>和<code>typeOf</code>两个主要方法。</p></li><li><p><code>runtimeMirror(getClass.getClassLoader)</code> 反射类<code>reflectClass()</code>, 反射实例<code>reflect()</code>,反射成员变量<code>reflectField()</code>,反射静态类<code>staticClass</code>…</p></li><li><p>不论我们是去操作方法还是实例化对象或是操作属性，流程大致都一致，获取类镜像是必经之路，然后去做反射，最后操作。</p></li><li><p><code>scala.reflect.runtime.universeruntimeMirror(getClass.getClassLoader)</code>获取当前jvm中所有的的运行类镜像。</p></li></ol></blockquote><h1 id="参考">6 参考</h1><ol><li><a href="https://developer.aliyun.com/article/641350">一篇入门 – Scala 反射</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scala进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily_leetCode_1106_1356</title>
      <link href="/2020/11/06/daily-leetCode-2020-1106-1356/"/>
      <url>/2020/11/06/daily-leetCode-2020-1106-1356/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述">1 题目描述</h1><blockquote><p>给你一个整数数组 arr 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。</p><p>如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。</p><p>请你返回排序后的数组。</p></blockquote><pre><code>输入：arr = [0,1,2,3,4,5,6,7,8]输出：[0,1,2,4,8,3,5,6,7]解释：[0] 是唯一一个有 0 个 1 的数。[1,2,4,8] 都有 1 个 1 。[3,5,6] 有 2 个 1 。[7] 有 3 个 1 。按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]输入：arr = [1024,512,256,128,64,32,16,8,4,2,1]输出：[1,2,4,8,16,32,64,128,256,512,1024]解释：数组中所有整数二进制下都只有 1 个 1 ，所以你需要按照数值大小将它们排序。输入：arr = [10000,10000]输出：[10000,10000]输入：arr = [2,3,5,7,11,13,17,19]输出：[2,3,5,17,7,11,13,19]输入：arr = [10,100,1000,10000]输出：[10,100,10000,1000]1 &lt;= arr.length &lt;= 5000 &lt;= arr[i] &lt;= 10^4</code></pre><h1 id="分析问题">2 分析问题</h1><blockquote><p>问题的本质就是一个排序问题，而不同平常的排序，多了一项条件，就是根据 其二进制表示中1的数目来排序，而数目相同则按数字的大小排序，如果你学过java，到这里 我想你应该知道 如何操作了。Array.sort(arr)</p></blockquote><hr><p>非常清晰的问题：</p><ol><li>统计序列中每个数的二进制表示中1的个数</li><li>利用上一步得到的结果数本身进行排序操作</li></ol><p>两个步骤中，均有常规版操作以及优化</p><h1 id="步步解题">3 步步解题</h1><ol><li>第一步，统计序列中每个数的二进制表示中1的个数</li></ol><p><strong>方法1，求得二进制序列，然后做统计</strong></p><p><strong><em>十进制转二进制</em></strong></p><ol><li>最常规的，<strong>求模取逆</strong></li></ol><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">""" 求一个数的进制 """</span><span class="token keyword">def</span> <span class="token function">get_num_bin</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    res_str <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">while</span> number<span class="token punctuation">:</span>        tmp <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">2</span>        res_str <span class="token operator">=</span> str<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">+</span> res_str        number <span class="token operator">//=</span> <span class="token number">2</span>    <span class="token keyword">return</span> res_str </code></pre><ol start="2"><li>递归求二进制</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_num_bin</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> number <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> number    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> get_num_bin<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>n<span class="token operator">%</span><span class="token number">2</span></code></pre><ol start="3"><li>和方法一类似，可以用数组存放、或者累乘法表示成正数，如果有负数要注意变号处理</li></ol><p>求得二进制后，我们便可以统计 1的个数。</p><hr><p><strong>方法2，巧妙的位运算</strong></p><p>另一种方法，不用显示地去求二进制的表示，便可以求其中1的个数，那就这就涉及到了<em>位运算</em></p><p>给定一个数的二进制，我们开始从最右边开始起判断，计数1的个数=&gt; 那么问题来了，如何判断最右边的数是1呢？第二个问题，何时结束呢？</p><p>如果能想到0，1这两个特殊的数字以及位运算操作，那么解决办法就来了。</p><blockquote><ol><li>1的二进制表示还是1，当用1与一个数做与运算时，得到的结果如果是1，那么最右边就是1，得到结果为0，那么就不是1。</li><li>何时结束，当然是遍历到最左边了，但是我们没必要知道二进制序列多长，况且我们还是从后面往前面走，如果去循环遍历判断计算1的个数，那和前面的方法没有什么区别了。另一种<code>while</code>式的思考方法当然是序列中没有1了，那我们就没有必要继续判断了。那么问题来了，如何判断序列中没有1了呢？ 那么解决办法来了=&gt; 0的二进制还是0，是唯一一个二进制表示没有1的数。假如我们有一种方法，使得这个数不断地向0靠近，并且保证最右边一位被更新。那么这种方法就是 <strong>右移</strong></li></ol></blockquote><p>根据前面的分析，写处代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_a_number_bin_count</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    得到一个数的二进制表示形式中 1 的个数    :param number:    :return:    """</span>    res_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> number<span class="token punctuation">:</span>        <span class="token keyword">if</span> number <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            res_count <span class="token operator">+=</span> <span class="token number">1</span>         number <span class="token operator">=</span> number <span class="token operator">>></span><span class="token number">1</span>     <span class="token keyword">return</span> res_count</code></pre><p>但是上面的代码对于负数就不那么通用了，虽然此题的所有测试样例都是正数，但是有必要学习更加适用的方法。</p><hr><p>我们先来观察一个整数与它的次小整数 在二进制表示上的区别，二进制的含义是什么=&gt; 满二进1。一个数加1，会发生的情况：最右边加1，满2进1，该位变0。进为后下一位为2那么继续进位，该位变0，如果进位后位1，那么就停止。我们可以发现的是，一个数加1后，在位表示上的变化是 <strong>遇到一个白马王子-&gt;1停止，而这个白马王子是最次等的，是这个数加1后最右边的那个1，或许再往左还有更好的，但是它满足了，停止脚步了</strong>.</p><p>从上面的分析中，我们可以得出一个结论：<strong>一个整数与它的次小整数在二进制表示上的差异是: 将该数右边的1变为0，最右边那个1的右边的所有位变为1</strong>。以1100得到1011为例</p><p>有了上面的结论，我们去做个小实验： <strong>用一个整数和它的次小整数做 与 运算，发现操作结果恰恰是将这个整数最右边的1变为了0</strong></p><p>1100 &amp; 1011 = 1000</p><p>根据前面的分析，我们可以写处这样的代码</p><pre class=" language-python"><code class="language-python">        <span class="token keyword">def</span> <span class="token function">get_a_number_bin_count</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            得到一个数的二进制表示形式中 1 的个数            :param number:            :return:            """</span>            res_count <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> number<span class="token punctuation">:</span>                number <span class="token operator">=</span> number <span class="token operator">&amp;</span> <span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                res_count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> res_count</code></pre><ol start="2"><li>利用上一步得到的结果与数本身进行排序操作, </li></ol><p>最简单的冒泡排序</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">sort_by_bits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        根据数字的二进制形式中的1的个数 对 array 进行排序        :param array:        :return: a array,排好序的结果        """</span>        <span class="token keyword">def</span> <span class="token function">get_a_number_bin_count</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""            得到一个数的二进制表示形式中 1 的个数            :param number:            :return:            """</span>            res_count <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> number<span class="token punctuation">:</span>                number <span class="token operator">=</span> number <span class="token operator">&amp;</span> <span class="token punctuation">(</span>number <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                res_count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> res_count        tmp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> get_a_number_bin_count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> array<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>tmp_list<span class="token punctuation">)</span>        <span class="token triple-quoted-string string">""" 排序 """</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>tmp_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp_list<span class="token punctuation">]</span></code></pre><p>利用现成的:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>get_a_number_bin_count<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>当然，如果你对<code>python</code>的常用函数熟悉，你还可以写处更简短的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">return</span> sorted<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>bin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h1 id="总结">4 总结</h1><ol><li>一个整数的二进制上最右边的1变为0，最右边那个1的右边的所有位变为1，便得到次小整数</li><li>0是唯一一个二进制表示没有1的数</li><li>一个整数如果是2的整数次方，那么它的二进制表示中有且只有一位是1。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily_leetCode_2020_1104_57_插入区间</title>
      <link href="/2020/11/04/daily-leetCode-2020-1104-57-%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/"/>
      <url>/2020/11/04/daily-leetCode-2020-1104-57-%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><blockquote><p>给出一个无重叠的 ，按照区间起始端点排序的区间列表。<br>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p><p>输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]<br>输出：[[1,2],[3,10],[12,16]]<br>解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10]重叠。</p><p>输入：intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]<br>输出：[[1,2],[3,10],[12,16]]<br>解释：这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。</p></blockquote><p><strong><em>题解</em></strong></p><p>审题：</p><blockquote><ol><li>source序列是有序的，每个 元也是有序的，而且是无重叠的</li><li>一个新元是有序的</li></ol></blockquote><p>目标： 将新元插入到source，保证有序且不重叠</p><p>关键点：</p><ol><li>处理 有重叠的 </li><li>继续保证有序</li></ol><p>思路：</p><ol><li>线性扫描source， 遇到不重叠的且 该排在 新元 前面的，存放到 res</li><li>遇到重叠的进行和并：下界取两者最小的，上界取两者最大的，更新到 新元中，</li><li>将新元保存到res中，将source中剩下的没有遍历的(肯定是排在更新的新元后面的)放到res</li></ol><p>例子详解：</p><p>[[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]]， [4, 8]</p><blockquote><p>遍历source，index=0为[1,2]， [1,2]整体是在[4,8] 左边的(比它小), 将[1,2]加入的res中，res=[[1,2],]</p></blockquote><blockquote><p>index=1为[3,5], [3,5]与[4,8]是有交叉的，根据上面思路中2更新 新元， 新元为[min (3,4) , max (5,8) ] = [3,8]</p><p>index=2w为[6,7]，与[3,8]有交叉，更新后的新元为 [3,8]</p><p>index=3为[8,10], 与[3,8]有交叉，更新后的新元为 [3,10]</p></blockquote><blockquote><p>index=4 时为[12,16], 与[3,10]没有交叉，且需要保存在[3,10]后面，此时将[3,10]加入到res中，res=[[1,2],[3,10]]</p></blockquote><blockquote><p>从[12,16]开始到遍历完，将所有的加入到res中， 最终结果为： res=[[1,2],[3,10],[12,16]]</p></blockquote><p>根据上面的思路写出代码：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""author: jdi146contact: jdi147.com@gmail.comdatetime: 2020/11/4 13:50"""</span><span class="token triple-quoted-string string">"""特例：1. [[]],[1,2]2. [[]], [],"""</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> intervals<span class="token punctuation">,</span> newInterval<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        index <span class="token operator">=</span> <span class="token number">0</span>        source_len <span class="token operator">=</span> len<span class="token punctuation">(</span>intervals<span class="token punctuation">)</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> source_len <span class="token operator">and</span> intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> newInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> source_len <span class="token operator">and</span> intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> newInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> newInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            newInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            newInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>newInterval<span class="token punctuation">)</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> source_len<span class="token punctuation">:</span>            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        newInterval <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> newInterval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    sol <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    sol<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>原题链接[<a href="https://leetcode-cn.com/problems/insert-interval/">57. 插入区间</a>]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>daily_leetCode_2020_1103_941_有效的山脉数组</title>
      <link href="/2020/11/04/daily-leetCode-2020-1103-941-%E6%9C%89%E6%95%88%E7%9A%84%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84/"/>
      <url>/2020/11/04/daily-leetCode-2020-1103-941-%E6%9C%89%E6%95%88%E7%9A%84%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><blockquote><p>给定一个整数数组 A，如果它是有效的山脉数组就返回 true，否则返回 false。</p><p>让我们回顾一下，如果 A 满足下述条件，那么它是一个山脉数组：</p><p>A.length &gt;= 3<br>在 0 &lt; i &lt; A.length - 1 条件下，存在 i 使得：<br>A[0] &lt; A[1] &lt; … A[i-1] &lt; A[i]<br>A[i] &gt; A[i+1] &gt; … &gt; A[A.length - 1]</p></blockquote><p><img src="https://gitee.com/diuzi/hexoImage/raw/master/img/daily_leetCode/image-20201104232027110.png" alt="image-20201104232027110"></p><p><strong><em>题解</em></strong></p><p>数组的特点：</p><ol><li>没有重复元，可以看作两个拥有一个共同最大值、sort方向相反的序列对接（先这样理解)。那么问题来了，关键点在与寻找峰值。</li></ol><p>假设这就是一个有效的山脉数组，那么</p><blockquote><ol><li>从头开始寻找峰值，在这个过程中<strong>判断第一个序列是否是无重复递增, 将峰值保存</strong></li><li>接着上一步，从峰值开始后面的是一个递减的序列（如果是有效山脉），<strong>遍历第二个序列判断它是否是无重复递减的</strong></li><li>当两个都遍历完没有问题时，就True掉，有问题时就在遍历的过程中False 掉。</li></ol></blockquote><p>到这里为止，大部分测试用例都可以跑通，但是上面的分析判断是基于两个序列</p><blockquote><ol><li>给测试用例<code>[1,2,3,4,5,6]</code>,会直接遍历完第一个序列不进行第二步操作，返回的结果是True, </li><li>当给测试用例<code>[6,5,4,3,2,1]</code>,同理，在第二步直接遍历完，也返回了True；但是这种纯递减和纯递增序列并不是山脉数组。</li></ol></blockquote><p>那么问题来了，如何去判断它是不是一个纯递减或者纯递增序列呢？</p><p>解决办法来了： <strong>判断峰值是否是第一位且最后一位，当都不是的时候肯定不是纯sort序列</strong></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""author: jdi146contact: jdi147.com@gmail.comdatetime: 2020/11/3 13:08"""</span><span class="token triple-quoted-string string">'''parm：is_left: 标记找到峰值'''</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">validMountainArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        list_len <span class="token operator">=</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span>        <span class="token keyword">if</span> list_len <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        max_value <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        min_value <span class="token operator">=</span> None        is_left <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> list_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> max_value <span class="token operator">==</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> is_left<span class="token punctuation">:</span>                <span class="token keyword">if</span> max_value <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    max_value <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    is_left <span class="token operator">=</span> <span class="token boolean">False</span>                    min_value <span class="token operator">=</span> max_value                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> min_value <span class="token operator">></span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    min_value <span class="token operator">=</span> A<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> max_value <span class="token operator">></span> A<span class="token punctuation">[</span>list_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> max_value <span class="token operator">></span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> min_value <span class="token operator">></span> A<span class="token punctuation">[</span>list_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        test_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>validMountainArray<span class="token punctuation">(</span>test_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""测试用例[3,7,20,14,15,14,10,8,2,1]: seq中20,14,15 ，在寻找max_value 的过程中，i 会多前进一位，所有在后半部分 判断中是用的 A[i-1],以及在最后 return中判断最后一个元素[1,2,3,4,5,6]: max_value > A[0]，[6,5,4,3,2,1]: max_value > A[list_len-1].O(n) / O(1)"""</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    solution<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>原题链接[<a href="https://leetcode-cn.com/problems/valid-mountain-array/">941. 有效的山脉数组</a>]</p><p>其他想法：</p><blockquote><ol><li>二分法递归找峰值判断，O(logn)</li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> daily_leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery record</title>
      <link href="/2020/08/21/hexo-matery-record/"/>
      <url>/2020/08/21/hexo-matery-record/</url>
      
        <content type="html"><![CDATA[<h1 id="前言">1 前言</h1><p>忙了两天终于搭建了自己的博客，win下hexo+github+matery。其中踩坑不少，还要很多地方需要完善、精化。写下这篇有博客以来的第一篇文章以记录后续的改善。</p><p>先在此记录一下待解决问题：</p><blockquote><ol><li>使用官方推荐的插件代码高亮,{}不能被正确转义, 目前的方法是降 hexo 的版本(4.2没有这个问题),等GitHub的issue solution吧.</li><li>valine 升级1.4.1后在Google中显示问题, Firefox倒是没有.</li><li>目录想设置个多级分类, finding </li><li>写个脚本, 在typora书写中,获取当前时间戳.</li><li>有时间搞个文章加密插件</li><li>针对特定文章关闭评论</li><li>关闭友链区的评论</li><li>logo有时间精化一下</li><li>seo优化，</li><li>百度统计，Google统计</li><li>再多就有点花里胡哨了，就这样</li></ol></blockquote><h1 id="toc显示问题-以及-配置标题自动编号">2 toc显示问题 以及 配置标题自动编号</h1><blockquote><p>发现一级标题不能在toc显示，以为是bug，后来发现主题默认toc开启的是h2,h3,h4, 于是修改为h1, h2, h3.</p></blockquote><p><strong>标题自动编号</strong>: </p><ol><li>win下 安装插件 hexo-heading-index</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-heading-index --save</code></pre><ol start="2"><li>根目录配置：<pre class=" language-yml"><code class="language-yml">heading_index: enable: true index_styles: "&#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125; &#123;1&#125;" connector: "." global_prefix: "" global_suffix: " "</code></pre>关于具体的配置信息，参考<a href="https://github.com/r12f/hexo-heading-index">hexo-heading-index </a></li></ol><p>到此，clean, g, d 后，发现目录变成了这样：</p><p><img src="https://gitee.com/diuzi/hexoImage/raw/master/img/hexo/%E6%89%B9%E6%B3%A8%202020-08-21%20220912.png" alt="批注 2020-08-21 220912"></p><p>但是，这个设置时针对全局的，这意味这只要在其他地方使用了层级符号，那么也会带有“数字”，为了避免这个情况，有两种解决办法。</p><blockquote><ol><li>在其他地方不使用层级符号 fh不是</li><li>设置heading-index 前几级编号，后几级使用肯定不会显示数字。</li></ol></blockquote><p>针对第二种方法，需要修改 hexo-heading-index/lib/index.js 文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">updateHeadingIndexes</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> decodeEntities<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> headings <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'h1, h2, h3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在这里, 保留几级看个人使用喜好</span></code></pre><p><strong># end</strong></p><h1 id="利用脚本写入文章更新时间">3 利用脚本写入文章更新时间</h1><p>想每次写完文章都记录一下文章的更新时间，方便纠错以及提供时间线。</p><p>此脚本可以给所有脚本加时间戳以及给单个文件加时间戳。</p><p><strong><em>关于更多的实用 blog 脚本, 可以访问我的GitHub，地址：<a href="https://github.com/diuzi/blog_script">blog_script</a>, 喜欢的话star一下，谢谢。</em></strong></p><p>代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">get_stamp</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param post_name:    :return:  null    """</span>    time_stamp <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d-%H-%M-%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">write_stamp</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param file_name:        :return: null        """</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"> ___#end___ 以上内容于 "</span> <span class="token operator">+</span> time_stamp <span class="token operator">+</span> <span class="token string">" 更新"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token triple-quoted-string string">""" 所有文件加时间戳 """</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">"all"</span><span class="token punctuation">:</span>        filename <span class="token operator">=</span> <span class="token string">"../source/_posts/*.md"</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            write_stamp<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""单个文件加时间戳 """</span>        filename <span class="token operator">=</span> <span class="token string">"../source/_posts/"</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">".md"</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            write_stamp<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"filename error\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"get_stamp.py"</span><span class="token punctuation">:</span>        get_stamp<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"command error\n"</span><span class="token punctuation">)</span></code></pre><p>首先在博客根目录下新建目录my_script，并将python脚本以get_stamp.py命名并放入此目录。在此目录下打开bash，运行以下命令</p><blockquote><p>单个文件加时间戳，postname为你要加时间戳的md文件</p></blockquote><pre class=" language-bash"><code class="language-bash"> python get_stamp.py postname</code></pre><blockquote><p>所有博客目录下所有md文件加时间戳</p></blockquote><pre class=" language-bash"><code class="language-bash"> python get_stamp.py all</code></pre><p>效果如下：</p><p><img src="https://gitee.com/diuzi/hexoImage/raw/master/img/hexo/%E6%97%B6%E9%97%B4%E6%88%B3%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA.png" alt="时间戳效果展示"></p><p><strong>当然，你也可以在此脚本的基础上进行修改以适配其他情况, 以及增加功能</strong></p><blockquote><p><strong><em>#end</em></strong> 以上内容于 2020-08-22-00-50-07 更新</p></blockquote><h1 id="关闭友链区评论，md页放上面。">4 关闭友链区评论，md页放上面。</h1><h1 id="文章加密">5 文章加密</h1><p>发现文章已经配置了加密功能，只需要在主题中开启配置即可。</p><p>简单写了个轮子，实用性一般般的样子，bash命令下给文档加密，缺点是需要一次性读文件，当文章特别长时。。。不过这种极端情况很少，折腾试试，直接贴代码 ：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">import</span> os<span class="token keyword">import</span> frontmatter<span class="token keyword">def</span> <span class="token function">encrypt_md</span><span class="token punctuation">(</span>post_name<span class="token punctuation">,</span> raw_pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    generate and write hash256 pwd    :param post_name:  md filename    :param raw_pwd:    :return:  null    """</span>    <span class="token keyword">def</span> <span class="token function">gen_pwd</span><span class="token punctuation">(</span>raw_pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param raw_pwd:        :return:        """</span>        hash256 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">)</span>        hash256<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>raw_pwd<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hash256<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">w_pwd</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> hash_pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param name:        :param pwd:        :return:        """</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"r+"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            md <span class="token operator">=</span> frontmatter<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>            md<span class="token punctuation">.</span>metadata<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash_pwd            f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>frontmatter<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token triple-quoted-string string">""" 所有文件加密 """</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">"all"</span><span class="token punctuation">:</span>        dir_name <span class="token operator">=</span> <span class="token string">"../source/_posts/*.md"</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>            w_pwd<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> gen_pwd<span class="token punctuation">(</span>raw_pwd<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" 单个文件加密"""</span>        filename <span class="token operator">=</span> <span class="token string">"../source/_posts/"</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">".md"</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            w_pwd<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> gen_pwd<span class="token punctuation">(</span>raw_pwd<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"filename error\n"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"encrypt.py"</span><span class="token punctuation">:</span>        encrypt_md<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"command error\n"</span><span class="token punctuation">)</span></code></pre><p>使用方法：</p><blockquote><p>如果你的根目录下还没有 _my_script_ 文件，那就新建一个，将代码写到该文件夹下，encrpt.py  命名，</p></blockquote><ol><li>单个文件加密,在 <code>my_script</code>目录下开启bash, win下执行命令，其他环境参考</li></ol><pre class=" language-bash"><code class="language-bash"> python encrypt.py postname password</code></pre><ol start="2"><li>多个 md 文件加密</li></ol><pre class=" language-bash"><code class="language-bash"> python encrypt.py all password</code></pre><p><strong>其中，<code>postname</code> 加密的md文件名， <code>password</code> 是要 设置的密码，注意密码不能含有空格。另外，如果还没有 frontmatter 包，需要进行安装。另外，网站填写密码是原生 <code>password</code> , 非md文件中的。</strong></p><p>pip安装命令：</p><pre class=" language-cmd"><code class="language-cmd">pip install python-frontmatter</code></pre><p><strong><em>关于更多的实用 blog 脚本, 可以访问我的GitHub，地址：<a href="https://github.com/diuzi/blog_script">blog_script</a>, 喜欢的话 star一下，谢谢。</em></strong></p><blockquote><p><strong><em>#end</em></strong> 以上内容于 2020-08-22-10-17-05 更新</p></blockquote><h1 id="seo优化">6 seo优化</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/08/21/test/"/>
      <url>/2020/08/21/test/</url>
      
        <content type="html"><![CDATA[<p>如果你看到这里的内容，那说明这个加密插件真的很L</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linkedList</title>
      <link href="/2020/08/21/linkedList/"/>
      <url>/2020/08/21/linkedList/</url>
      
        <content type="html"><![CDATA[<h1 id="链表">1 链表</h1><blockquote><p><strong><em>插入的时候，单链表/双链表(先接后面)</em></strong><br><strong><em>往后移，前面的先移动，往前移动，后面的先移动。</em></strong></p></blockquote><p>与数组不同，我们无法在常量时间内访问单链表中的随机元素。<br> 如果我们想要获得第 i 个元素，我们必须从头结点逐个遍历。<br>我们按索引来访问元素平均要花费 O(N) 时间，其中 N 是链表的长度。</p><p>尽管它在通过索引访问数据时（与数组相比）具有如此糟糕的性能。<br>插入和删除操作，将了解到链表的好处。</p><ol><li><p>在 O(1) 时间复杂度中将新结点插入到链表中，这非常高效。</p></li><li><p>删除结点的时间复杂度将是 O(N)。空间复杂度为 O(1)，因为我们只需要常量空间来存储指针。</p></li></ol><h1 id="链表中的双指针">2 链表中的双指针</h1><h2 id="循环链表">2.1 循环链表</h2><blockquote><p>给定一个链表，判断链表中是否有环</p></blockquote><p><strong><em>在链表中使用两个速度不同的指针时会遇到的情况:</em></strong></p><blockquote><p><strong>如果没有环，快指针将停在链表的末尾。</strong><br><strong>如果有环，快指针最终将与慢指针相遇。</strong></p></blockquote><p><strong><em>这两个指针的适当速度应该是多少？</em></strong><br>一个安全的选择是每次移动慢指针一步，而移动快指针两步。每一次迭代，快速指针将额外移动一步。如果环的长度为 M，经过 M 次迭代后，快指针肯定会多绕环一周，并赶上慢指针。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> null <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>方法2，哈希表</strong></p><blockquote><p>我们遍历所有结点并在哈希表中存储每个结点的引用（或内存地址）。如果当前结点为空结点 null（即已检测到链表尾部的下一个结点），那么我们已经遍历完整个链表，并且该链表不是环形链表。如果当前结点的引用已经存在于哈希表中，那么返回 true（即该链表为环形链表）</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>ListNode<span class="token operator">></span> nodesSeen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nodesSeen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nodesSeen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="循环链表2">2.2 循环链表2</h2><p><strong><em>给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</em></strong></p><ol><li>快指针1次走2步，慢指针1次走1步。所以快指针总是走了慢指针两倍的路。</li><li>回顾一下阶段1的过程，设头节点到入环点的路途为 n, 那么慢指针走了入环路途的一半（n/2）时，快指针就到达入环点了(走完n了)。</li><li>慢指针再继续走完剩下的一般入环路途（剩下的n/2），到达入环点时，快指针已经在环内又走了一个 n 那么远的路了。</li><li>为了方便理解，这里先讨论环很大，大于n的情况（其他情况后文补充）。此时，慢指针正处于入环点，快指针距离入环点的距离为n。环内路，可以用此时快指针的位置分割为两段，前面的 n 部分，和后面的 b 部分。</li><li>此时开始继续快慢指针跑圈，因为已经在环内了，他们其实就是在一条nbnbnbnbnbnbnb（无尽nb路）上跑步。</li><li>慢指针从入环处开始跑b步，距离入环处就剩下了n。此时，快指针则是从距离入环处n步远的位置开始跑了2b步，距离入环处也是剩下了n。他们相遇了，并且距离入环处的距离就是n，n就是头节点到入环点的距离阿!!! 后面的不用说了吧。</li></ol><p>环很小的情况，其实跟环很大是一样的，比如你可以理解为将多个小环的循环铺开，虚拟扩展成一个大环来理解。</p><p><img src="https://gitee.com/diuzi/hexoImage/raw/master/imgx/image.png"><br><strong>假设 节点到入环口长为 L，环长为C</strong><br>这里简单讨论C&gt;L的情况, 即一个大环（slow在走到入环口处，fast还没有遍历一遍环)</p><blockquote><ol><li>slow到达入口处时，fast 在环 <strong>L%C</strong>  的位置(slow走L，fast走2L)</li><li>设 slow 继续行进 t 长 时，两者相遇， 此时有方程: <strong><em>(L%C+2t)%C = t%C</em></strong></li><li>则 有 L%C + 2t = t+ nC —&gt; L%C+2t = t+nC</li><li>C&gt;L, 取n=1,得 t = C - L%C, 相遇，L%C=L, 即 目前两者处在环 C-L处，再走 L 长便可到达 入环处<br><strong>当C&lt;L，即小环时，n的取值较大，即两者绕环次数多一些，结果还是不变。</strong></li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到相遇点</span>    ListNode p1 <span class="token operator">=</span> <span class="token function">getIntersect</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode p2 <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头节点到入环处的距离 和 相遇点行走到 入环处的距离 相等</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> p2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p1<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="模板">3 模板</h1><h2 id="解决链表中的双指针">3.1 解决链表中的双指针</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断是否有环</span><span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// move slow pointer one step each time</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// move fast pointer two steps each time</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// change this condition to fit specific problem</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 寻找链表的 第一次相遇节点</span><span class="token keyword">private</span> ListNode <span class="token function">getIntersect</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span>            <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="列表反转">3.2 列表反转</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ListNode prev <span class="token operator">=</span> null<span class="token punctuation">;</span>    ListNode curr <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode nextTemp <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> curr<span class="token punctuation">;</span>        curr <span class="token operator">=</span> nextTemp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="要善用哑变量，特别是在删除的时候">4 要善用哑变量，特别是在删除的时候</h1><blockquote><p><em>删除链表中等于给定值 val 的所有节点。</em></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 巧用 哑变量</span>    <span class="token comment" spellcheck="true">/*        如果头或者前 n 个 都是要删除的变量， 这样操作比较麻烦         */</span>    ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span>  head<span class="token punctuation">;</span>    ListNode cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span>  cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="递归的总结">5 递归的总结</h1><blockquote><p><em>删除链表中等于给定值 val 的所有节点。</em></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        和19题 有异曲同工之妙        1. 递归的结束条件时什么【走到最深处】        2. 子序列去递归【做什么】        3. 递归的返值是什么【向上返回】         */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> head <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return head->val == val ? head->next : head;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> data struct </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linkedList </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
